/**
 * The format of the request data.
 *
 *
 * Type		Name		Default			Required/Optional	Description
 * --------------------------------------------------------------------
 * Array	headers		Empty Array		Optional			An array of object headers to be sent.
 * Mixed	messages	Empty Array		Required			An array of mixed messages to be sent.
 * String	mime		text/plain		Optional			A string containing the mime type of the message(s) being sent.
 * String	enc			null			Optional			A string containing the encoding type of the mesasge(s) being sent.
 * 																Null value means no encoding on the message(s)
 * Boolean	auth		false			Optional			Boolean, set if the message sent is required to be authed on the recieving end.
 * String	callback	null			Optional			A string containing a function name to be used with jsonp requests as a callback.
 * 																If omitted then same domain request restrictions apply.
 * String	type		"get"			Optional			The message protocol to use. GET, POST, PUT, UPDATE, DELETE.
 * 																GET		Used to retrieve information from the server.
 * 																POST	Used to send general info to the server.
 * 																PUT		Used to save data to the server (Add a record to a database)
 * 																UPDATE	Used to update data on the server (Update a record in a database)
 * 																DELETE	Used to delete data from the server (Delete a record from a database)
 *
 *
 * For multiple requests with different headers and/or authentication send an array of requests.
 *
 * Empty value should not indecate false, and the same in repect that a value of any kind should not indecate a true value.
 *
 * Data MUST be either URL safe, or BASE64 or UU encoded. If encoded then the enc property of the request must be set.
 *	Valid values for enc are null, URL, BASE64 or UU.
 *	If no encoding has been done then the enc value should be null.
 * 
 * If authentication is used then message MUST be of type object and MUST contain all a property of "authentication" which in tern contains all
 * 	authentication data required by the server to make the request.
 *
 * On auth fail the server MUST respond with a failed message. Response data MUST NEVER say exactly why the authentication has failed but can be vague.
 * 	Eg.
 * 		OK:		"Sorry the username and password did not match our records"
 * 		BAD:	"The username could not be found". | "The password was incorrect for the username given"
 * 
 * When deleting records from the server the data should not actually be deleted
 * 	but instead some means of telling subsiquent requests that that data has been deleted.
 * 	In a database example this could be a flag or a field set to say that record has been deleted.
 * 		Never use POST/GET/DELETE to add or update data.
 * 		Never use PUT to update data. If data already exists then return false/failed message.
 * 		Never use UPDATE to add data. If data does not exist then return false/failed message.
 *
 * Response messages MUST be of type object and MUST contain a property "passes" with a boolean value of true or false, 1 or 0.
 * 	Extra properties may be included if data is required to be passed back to the client.
 * 		Data passed back in the message can be of any type.
 *
 * Functions MUST NEVER be sent in message requests or responses. Function names can be, and then used to call functions on the server or client.
 */
{
	"headers"	: [],
	"messages"	: [],
	"mime"		: "text/plain",
	"enc"		: null,
	"auth"		: false,
	"callback"	: null
	"type"		: "get"
}

/**
 * Send message
 */

// 1 Send a string message.
{
	"message"	: "foobar"
}

// 2 Send an array of messages
{
	"message"	: [
		"foo",
		"bar"
	]
}

// 3 Send an object message
{
	"message"	: {
		"foo" : "bar"
	}
}

// 4 Send an array of requests with diferent authentication types
[
	{
		"message"	: "foo"
	},
	{
		"message"	: "bar",
		"auth"		: true
	}
]

/**
 * Return message
 */

// 1 Passed message
{
	"message"	: {
		"passed" : true
	}
}

// 2 Passed message with data
{
	"message"	: {
		"passed"	: false,
		"data"		: {
			"foo" : "bar"
		}
	}
}
